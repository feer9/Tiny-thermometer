# Makefile for programming the ATtiny85
# modified the one generated by CrossPack

DEVICE      = attiny85
CLOCK       = 8000000
PROGRAMMER  = usbasp-clone

HEADERS    := $(wildcard include/*.h include/**/*.h)
SOURCES    := $(wildcard src/*.c)
CSOURCES   := tinudht.c timer.c onewire.c romsearch.c USI_TWI_Master.c ds18b20.c SSD1306_minimal.c TinyWireM.c main.c
CXXSOURCES := 
COBJECTS   := $(CSOURCES:%.c=obj/%.o)
CXXOBJECTS := $(CXXSOURCES:%.cpp=obj/%.o)
OBJECTS    := $(COBJECTS) $(CXXOBJECTS)

# for ATTiny85
# see http://www.engbedded.com/fusecalc/
# default to 1MHz, you need to use -B3 option in avrdude
FUSES_DEFAULT = -U lfuse:w:0x62:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m 
FUSES_8MHZ    = -U lfuse:w:0xe2:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m
FUSES_16MHZ   = -U lfuse:w:0xe1:m -U hfuse:w:0xdd:m -U efuse:w:0xfe:m 
FUSES        := $(FUSES_8MHZ)

# Tune the lines below only if you know what you are doing:
AVRDUDE = avrdude -c $(PROGRAMMER) -p $(DEVICE) -B1
CC = avr-gcc
CXX = avr-g++
CFLAGS = -Wall -Os -I./include -D__AVR_ATtiny85__ -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -std=gnu99 -W -Wstrict-prototypes -ffunction-sections -fdata-sections -ffreestanding -mcall-prologues
CXXFLAGS = -Wall -Os -I./include -D__AVR_ATtiny85__ -DF_CPU=$(CLOCK) -mmcu=$(DEVICE) -fno-threadsafe-statics
LDFLAGS = -Wl,--relax -Wl,--gc-sections
COMPILE = $(CC) $(CFLAGS) $(LDFLAGS)

# symbolic targets:
all: disasm ;
#	$(info $$CSOURCES is [${CSOURCES}]) 
#	$(info $$CXXSOURCES is [${CXXSOURCES}])
#	$(info $$OBJECTS is [${OBJECTS}])
#	$(info $$HEADERS is [${HEADERS}])

obj:
	mkdir -p obj

$(COBJECTS): obj/%.o: src/%.c Makefile $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

$(CXXOBJECTS): obj/%.o: src/%.cpp Makefile $(HEADERS)
	$(CXX) $(CXXFLAGS) -c $< -o $@

#.S.o:
#	$(COMPILE) -x assembler-with-cpp -c $< -o $@

#.c.s:
#	$(COMPILE) -S $< -o $@

flash:	all
	$(AVRDUDE) -U flash:w:main.hex:i

fuse:
	$(AVRDUDE) $(FUSES)

# Xcode uses the Makefile targets "", "clean" and "install"
install: fuse flash

clean:
	rm -rf main.hex main.elf $(OBJECTS) obj


# file targets:
main.elf: obj $(OBJECTS) $(HEADERS) Makefile
	$(COMPILE) -o main.elf $(OBJECTS)

main.hex: main.elf
	rm -f main.hex
	avr-objcopy -j .text -j .data -O ihex main.elf main.hex
	avr-size --format=avr --mcu=$(DEVICE) main.elf
# If you have an EEPROM section, you must also create a hex file for the
# EEPROM and add it to the "flash" target.

# Targets for code debugging and analysis:
disasm:	main.hex
	avr-objdump -d main.elf > disasm.s

cpp:
	$(COMPILE) -E main.c 

# doesn't work with avr-gcc 10.2.0
whole: $(SOURCES) $(HEADERS) Makefile
	$(CC) $(CFLAGS) --combine -fwhole-program $(LDFLAGS) -o main.elf $(SOURCES)
	avr-objcopy -j .text -j .data -O ihex main.elf main.hex
	avr-size --format=avr --mcu=$(DEVICE) main.elf

# https://p5r.uk/blog/2008/avr-gcc-optimisations.html
